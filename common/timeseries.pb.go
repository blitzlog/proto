// Code generated by protoc-gen-go. DO NOT EDIT.
// source: timeseries.proto

package common

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Timeseries struct {
	Timestamps           map[int64]*TsMetric `protobuf:"bytes,1,rep,name=timestamps,proto3" json:"timestamps,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Timeseries) Reset()         { *m = Timeseries{} }
func (m *Timeseries) String() string { return proto.CompactTextString(m) }
func (*Timeseries) ProtoMessage()    {}
func (*Timeseries) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f432f906d7ab9cb, []int{0}
}

func (m *Timeseries) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Timeseries.Unmarshal(m, b)
}
func (m *Timeseries) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Timeseries.Marshal(b, m, deterministic)
}
func (m *Timeseries) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Timeseries.Merge(m, src)
}
func (m *Timeseries) XXX_Size() int {
	return xxx_messageInfo_Timeseries.Size(m)
}
func (m *Timeseries) XXX_DiscardUnknown() {
	xxx_messageInfo_Timeseries.DiscardUnknown(m)
}

var xxx_messageInfo_Timeseries proto.InternalMessageInfo

func (m *Timeseries) GetTimestamps() map[int64]*TsMetric {
	if m != nil {
		return m.Timestamps
	}
	return nil
}

type TsMetric struct {
	Metrics              map[string]float32 `protobuf:"bytes,1,rep,name=metrics,proto3" json:"metrics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *TsMetric) Reset()         { *m = TsMetric{} }
func (m *TsMetric) String() string { return proto.CompactTextString(m) }
func (*TsMetric) ProtoMessage()    {}
func (*TsMetric) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f432f906d7ab9cb, []int{1}
}

func (m *TsMetric) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TsMetric.Unmarshal(m, b)
}
func (m *TsMetric) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TsMetric.Marshal(b, m, deterministic)
}
func (m *TsMetric) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TsMetric.Merge(m, src)
}
func (m *TsMetric) XXX_Size() int {
	return xxx_messageInfo_TsMetric.Size(m)
}
func (m *TsMetric) XXX_DiscardUnknown() {
	xxx_messageInfo_TsMetric.DiscardUnknown(m)
}

var xxx_messageInfo_TsMetric proto.InternalMessageInfo

func (m *TsMetric) GetMetrics() map[string]float32 {
	if m != nil {
		return m.Metrics
	}
	return nil
}

func init() {
	proto.RegisterType((*Timeseries)(nil), "common.timeseries")
	proto.RegisterMapType((map[int64]*TsMetric)(nil), "common.timeseries.TimestampsEntry")
	proto.RegisterType((*TsMetric)(nil), "common.tsMetric")
	proto.RegisterMapType((map[string]float32)(nil), "common.tsMetric.MetricsEntry")
}

func init() { proto.RegisterFile("timeseries.proto", fileDescriptor_8f432f906d7ab9cb) }

var fileDescriptor_8f432f906d7ab9cb = []byte{
	// 222 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x28, 0xc9, 0xcc, 0x4d,
	0x2d, 0x4e, 0x2d, 0xca, 0x4c, 0x2d, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4b, 0xce,
	0xcf, 0xcd, 0xcd, 0xcf, 0x53, 0x5a, 0xc8, 0xc8, 0xc5, 0x85, 0x90, 0x14, 0x72, 0x82, 0xf2, 0x4a,
	0x12, 0x73, 0x0b, 0x8a, 0x25, 0x18, 0x15, 0x98, 0x35, 0xb8, 0x8d, 0x94, 0xf4, 0x20, 0x6a, 0xf5,
	0x90, 0x0c, 0x09, 0x81, 0x2b, 0x72, 0xcd, 0x2b, 0x29, 0xaa, 0x0c, 0x42, 0xd2, 0x25, 0xe5, 0xcf,
	0xc5, 0x8f, 0x26, 0x2d, 0x24, 0xc0, 0xc5, 0x9c, 0x9d, 0x5a, 0x29, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1,
	0x1c, 0x04, 0x62, 0x0a, 0xa9, 0x71, 0xb1, 0x96, 0x25, 0xe6, 0x94, 0xa6, 0x4a, 0x30, 0x29, 0x30,
	0x6a, 0x70, 0x1b, 0x09, 0xc0, 0xed, 0x28, 0xf6, 0x4d, 0x2d, 0x29, 0xca, 0x4c, 0x0e, 0x82, 0x48,
	0x5b, 0x31, 0x59, 0x30, 0x2a, 0xd5, 0x73, 0x71, 0xc0, 0x84, 0x85, 0xcc, 0xb9, 0xd8, 0x73, 0xc1,
	0x2c, 0x98, 0xeb, 0x64, 0xd1, 0x75, 0xea, 0x41, 0x28, 0xa8, 0xc3, 0x60, 0xaa, 0xa5, 0xac, 0xb8,
	0x78, 0x90, 0x25, 0x90, 0x9d, 0xc4, 0x09, 0x71, 0x92, 0x08, 0xb2, 0x93, 0x98, 0x90, 0x1c, 0xe0,
	0xa4, 0x14, 0xa5, 0x90, 0x9e, 0x59, 0x92, 0x51, 0x9a, 0x04, 0xb2, 0x4b, 0x3f, 0x29, 0x27, 0xb3,
	0xa4, 0x2a, 0x27, 0x3f, 0x5d, 0x1f, 0x1c, 0x92, 0xfa, 0x10, 0xeb, 0x93, 0xd8, 0xc0, 0x3c, 0x63,
	0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x79, 0xde, 0xb7, 0xc7, 0x6b, 0x01, 0x00, 0x00,
}
